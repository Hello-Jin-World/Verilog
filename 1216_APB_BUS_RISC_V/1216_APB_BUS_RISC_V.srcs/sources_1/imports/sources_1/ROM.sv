`timescale 1ns / 1ps

module ROM (
    input  logic [31:0] addr,
    output logic [31:0] data
);
    logic [31:0] rom[0:63];

    initial begin  // for test
        // rom[x] = 32'b func7 _ rs2 _ rs1 _f3 _  rd _ opcode; // R-TYPE
        rom[0] = 32'b0000000_00001_00010_000_00100_0110011;// add x4, x2, x1; ==>  x4 = 2 + 1 = 3;
        rom[1] = 32'b0000000_00001_00010_000_00101_0110011;// sub x5, x2, x1; ==>  x5 = 2 - 1 = 1;
        rom[2] = 32'b0000000_00101_00100_000_00110_0110011;// add x6, x4, x5; ==>  x6 = 3 + 1 = 4;
        rom[3] = 32'b0100000_00101_00100_000_00111_0110011;// sub x7, x4, x5; ==>  x7 = 3 - 1 = 2;
        // rom[x] = 32'b imm(7)_ rs2 _ rs1 _f3 _imm(5)_ opcode; // S-TYPE
        rom[4] = 32'b0000000_11111_00001_000_00011_0100011; // sw x2, x1, 3; ==> M[1+3] = 2
        rom[5] = 32'b0000000_11111_00001_001_00111_0100011; // sw x2, x1, 3; ==> M[1+7] = 2
        rom[6] = 32'b0000000_11111_00001_010_01011_0100011; // sw x2, x1, 3; ==> M[1+11] = 2

        rom[7] = 32'b0000000_11110_00001_010_01111_0100011; // sw x2, x1, 3; ==> M[1+11] = 2
        rom[8] = 32'b0000000_11101_00001_010_10011_0100011; // sw x2, x1, 3; ==> M[1+11] = 2
        // // rom[x] = 32'b imm(12)    _ rs1 _f3 _  rd _ opcode; // IL-TYPE
        // rom[9]  = 32'b000000010011_00001_000_01000_0000011;//lw x8, x1, 3; ==> x8 = M[1+3]
        // rom[10] = 32'b000000001111_00001_001_01001_0000011;//lw x8, x1, 3; ==> x8 = M[1+3]
        // rom[11] = 32'b000000001011_00001_010_01010_0000011;//lw x8, x1, 3; ==> x8 = M[1+3]
        // rom[12] = 32'b000000001011_00001_100_01011_0000011;//lw x8, x1, 3; ==> x8 = M[1+3]
        // rom[13] = 32'b000000001011_00001_101_01100_0000011;//lw x8, x1, 3; ==> x8 = M[1+3]
        //J-TYPE
        // rom[6] = 32'b0000000_10100_00000_000_01010_1101111; // x10 = PC + 4; PC += 20;
        //JI-TYPE
        // rom[6] = 32'b0000000_10000_10000_000_01011_1100111; // x11 = PC + 4; PC = x16 + 16;
        //U-TYPE
        // rom[6] = 32'b0000000_00000_00000_001_01100_0110111; // x12 = 1_0000_0000_0000 << 12 = 16,777,216;
        // $readmemh("romCode.mem", rom);
        // rom[7] = 32'b0000000_00000_00000_001_01101_0010111; // x13 = PC + (1_0000_0000_0000 << 12) = 16,777,216 + 28;

        //B-TYPE Instructions
        // rom[6] = 32'b0000000_00100_00101_000_10000_1100011; // BEQ x1, x2, 4; if (x1 == x2) PC += 4
        // rom[6] = 32'b0000000_00010_00001_001_10000_1100011; // BNE x1, x2, 4; if (x1 != x2) PC += 4
        // rom[6] = 32'b0000000_00010_00001_100_01000_1100011; // BLT x1, x2, 4; if (x1 < x2) PC += 4
        // rom[6] = 32'b0000000_00001_00010_101_01100_1100011; // BGE x1, x2, 4; if (x2 >= x1) PC += 12
        //   rom[0] = 32'b0000000_00010_00001_110_01000_1100011; // BLTU x1, x2, 4; if (x1 < x2 unsigned) PC += 4
        //   rom[0] = 32'b0000000_00001_00010_111_01000_1100011; // BGEU x1, x2, 4; if (x1 >= x2 unsigned) PC += 4





        //S-TYPE
        //  // rom[x] = 32'b func7 _ rs2 _ rs1 _f3 _  rd _ opcode; // R-TYPE
        //     rom[0] = 32'b0000000_00001_00010_000_00100_0110011;// add x4, x2, x1; ==>  x4 = 2 + 1 = 3;
        //     rom[1] = 32'b0100000_00001_00010_000_00101_0110011;// sub x5, x2, x1; ==>  x5 = 2 - 1 = 1;
        //     rom[2] = 32'b0000000_00101_00100_000_00110_0110011;// add x6, x4, x5; ==>  x6 = 3 + 1 = 4;
        //     rom[3] = 32'b0100000_00101_00100_000_00111_0110011;// sub x7, x4, x5; ==>  x7 = 3 - 1 = 2;
        //  // rom[x] = 32'b imm(7)_ rs2 _ rs1 _f3 _imm(5)_ opcode; // S-TYPE
        //     rom[4] = 32'b0000000_00010_00001_010_00011_0100011; // sw x2, x1, 3; ==> M[1+3] = 2
        //  // rom[x] = 32'b imm(12)    _ rs1 _f3 _  rd _ opcode; // IL-TYPE
        //     rom[5] = 32'b000000000011_00001_010_01000_0000011;//lw x8, x1, 3; ==> x8 = M[1+3]
        //    //  $readmemh("code.mem", rom);
        //  end


        // rom[x] = 32'b func7 _ rs2 _ rs1 _f3 _  rd _ opcode; // R-TYPE
        //   rom[0] = 32'b0000000_00001_00010_000_00100_0110011;// add x4, x2, x1; ==>  x4 = 2 + 1 = 3;
        //   rom[1] = 32'b0100000_00001_00010_000_00101_0110011;// sub x5, x2, x1; ==>  x5 = 2 - 1 = 1;
        //   rom[2] = 32'b0000000_00101_00100_000_00110_0110011;// add x6, x4, x5; ==>  x6 = x4 + x5 = 4;
        //   rom[3] = 32'b0100000_00101_00100_000_00111_0110011;// sub x7, x5, x4; ==>  x7 = x4 - x5 = 2;
        //   // rom[x] = 32'b imm(7)_ rs2 _ rs1 _f3 _imm(5)_ opcode; // S-TYPE
        //   rom[4] = 32'b0000000_00010_00001_010_00011_0100011; // sw x2, x1, 3; ==> M[1+3] = 2
        //   // rom[x] = 32'b imm(12)    _ rs1 _f3 _  rd _ opcode; // IL-TYPE
        //   rom[5] = 32'b000000000011_00001_010_01000_0000011;//lw x8, x1, 3; ==> x8 = M[1+3]

        //   // JAL 32'b imm(20) _ rd(5) _ op(7)
        //   //  rom[6] = 32'b0_0000000101_0_00000000_01001_1101111; // x9 = 28, PC = PC + 10 = 24 + 10 = 34
        //   rom[6] = 32'b0000000_10100_00000_000_01010_1101111; // x10 = PC + 4; PC += 20;
        //   // JALR
        //rom[6] = 32'b000000011000_00001_000_01010_1100111; // imm = 24 --> 28, rs1 = 1, ==>   r10 = PC+4, PC = 1 + 24 = 25 --> 29

        // LUI   
        //rom[6] = 32'b00000000000000000001_01011_0110111;       // rd = 11, imm = 1

        // AUIPC
        //rom[7] = 32'b00000000000000000001011000010111;       //rd = 12, imm = 1

        // B-Type
        // BEQ
        //rom[6] = 32'b00000000010100001000011001100011;       // pc = pc + 12 = 24 + 12 = 36 <-- x1(1), x5(1)
        //rom[6] = 32'b00000000010000001000011001100011;       // pc = pc + 4(no change) <-- x1(1), x4(3)

        //BNE
        //rom[6] = 32'b00000000010000001001011001100011;       // pc = pc + 12 = 36 <-- x1(1), x4(3)

        //BLT
        //rom[6] = 32'b00000000010000001100011001100011;       // x1<x4 --> pc = 36
        //rom[6] = 32'b00000000000100100100011001100011;         // x4 < x1(false) --> pc = pc+4;

    end
    assign data = rom[addr[31:2]];

endmodule
